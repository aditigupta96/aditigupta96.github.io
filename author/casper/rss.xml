<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://aditigupta96.github.io/</title>
   
   <link>http://aditigupta96.github.io/</link>
   <description>Google WTM 2017 Scholar|GSoC'17 @Systers|Google Code-In Mentor @Systers|GSoC'16 @Systers|Intern @GeeksforGeeks</description>
   <language>en-uk</language>
   <managingEditor> Aditi Gupta</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>My experience of Google APAC Women Techmakers Scholarship 2017</title>
	  <link>//My-experience-of-Google-APAC-Women-TechMakers-Scholarship</link>
	  <author>Aditi Gupta</author>
	  <pubDate>2017-09-15T05:30:00+05:30</pubDate>
	  <guid>//My-experience-of-Google-APAC-Women-TechMakers-Scholarship</guid>
	  <description><![CDATA[
	     <p><em>Life is full of unexpected surprises. There are many opportunities when one can secretly wish for something exciting to happen – something out of the ordinary. The real surprise is when the wish unexpectedly comes true. The same happened to me on the night of 18th July when I received an email from the Women Techmakers Scholars Program Team, congratulating me for being selected as a scholarship recipient. Wow !!! I could feel the adrenalin rushing up my body. I was among the <strong>71 scholars</strong> of the <strong>APAC region</strong> and was awarded a scholarship and an opportunity to attend the Scholars’ Retreat at Campus Seoul of Google.</em></p>

<h4 id="heading4">What is Google Women TechMakers Scholarship?</h4>
<p>This program which is formerly known as  the Google Anita Borg Memorial Scholarship Program - Google is an academic scholarship, awarded based on academic performance, leadership, and impact on the community of women in tech.
This Scholars program consists of the following elements : Scholarship, Retreat and the Community. The application opens for this scholarship in April and the process involves answering some essay questions followed by an interview by a google engineer (only after you get shortlisted).</p>

<h4 id="heading4">The Scholarship Retreat</h4>
<p>The Retreat was scheduled on August 29th - September 1st at Seoul, South Korea. Google had organized everything like our flight tickets, meals and accomodation. Google had made great arrangements for us to stay at Intercontinental Grand Seoul Parnas and each one of us was assigned a roommate from a different country. I was very excited and was counting down for the upcoming retreat to meet the <strong>70</strong> other passionate scholars from <strong>13 different countries</strong>. I reached Seoul on the night of 28th along with 10 other scholars from India. I met with my roommate Alanna who was from Australia and we bonded really well.</p>

<blockquote>
  <p><strong>Seoul Searching</strong><br />
We planned a day out exploring Seoul on 29th August with few of the scholars who had arrived earlier. We visited Changgyeonggung palace along with the Changdeokgung Palace and the secret garden. We also explored the local market area , Insadong and visited Bukchon Hanok Village. It was great fun exploring the places and culture of the city along with the fellow scholars sharing the experiences in technology, community and life.</p>
</blockquote>

<p><img src="assets/images/1.jpg" style="max-width:700px" /></p>

<h5 id="heading5">DAY 1 - August 29th</h5>
<p>The retreat kicked off with a  welcome dinner at <strong>Grand Intercontinental Coex hotel</strong>. Each one of us was assigned a table number and each table had a group of scholars from different countries. It was very inspiring talking to the fellow scholars about their challenges and their involvement in the community. The dinner was followed with a Karaoke night where we Indians performed on a bollywood song which was enjoyed by everyone . The night ended with a wonderful performance on Gangnam Style by Han Gyul (google recruiter of South Korea).</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/AG5zU1Ow-wI?rel=0" frameborder="0" allowfullscreen=""></iframe>

<h5 id="heading5">Day 2 - August 30th</h5>
<p>The first day started with a few mins ride to the Google office followed by the breakfast and an energiser for 15 mins. We were taught the steps of k-Pop on the famous korean song Cheer up.</p>

<p>There were sequence of activities planned out by the Googlers for us to participate and learn which are listed below :</p>
<ol>
<li><b>Opening Keynote :</b> The session started with an opening keynote by Georgia who introduced us to the vision of Dr. Anita Borg of promoting women in the field of technology and inspired us to continue contributing to the community.
</li>
<br />
<img src="assets/images/2.jpg" style="max-width:650px" />

<li><b>Open House - Stories of Success, Tales of Fails :</b> The session followed with an exercise where we were divided into teams of 9 (Mine was Team Yellow) and each one of us shared a story of success followed by a story of failure. It was a great experience listening to the challenges faced by the leading women in tech and how they overcame it.
</li>
<br />

<li><b>Office tour :</b> The office tour boosted up the energy level of every scholar. Google Office is the most comfortable place to work. There were the massage rooms,  Sleeping quarters, Multiple micro kitchens with free food, small café and lunch cafeteria,  Nice lounges, sitting areas and beautiful google signs, Tech rental space where you can take gadgets home such as 	headphones, usb or power cables, Play room with table tennis, video games, hula hoops, exercise bike, meditation rooms etc. 
</li>
<br />
<img src="assets/images/3.jpg" style="max-width:500px" />
<br />
<img src="assets/images/4.jpg" style="max-width:500px" />
<br />
<img src="assets/images/5.jpg" style="max-width:500px" />
<br />
<li><b>Tech Talk :</b> The session continued with a tech talk by the head of Search team, Brad Park. He introduced us to the search feature of Google as well as the latest technologies introduced by Google like Google Home, Google watch and Google Assistant.
</li>
<br />

<li><b>Lunch :</b> We had the varieties of Korean Food prepared by the Google Chef’s at the Cafe Maroo of the office.
</li>
<br />
<img src="assets/images/cafe.JPG" style="max-width:650px" />
<br />

<li><b>Bias Bursting :</b> Lunch was followed by a bias bursting event where we were given 3 scenarios and we had to role-play the part of the Receiver, Bystander, Actor and observer. This event taught us to promote diversity while respecting everyone by keeping aside the jealousy.
</li>
<br />

<li><b>CS Unplugged :</b> This was my favourite workshop conducted by a former scholar, Caitlin.  The CS Unplugged doesn’t involve computers and it aims at teaching the core algorithms and concepts and computational thinking skills using the fun activities. The activities included the binary numbers using paper dots, Parody exercise, making paper planes in teams and flying it in 3 sprints. This was aimed to make us learn about the Software Agile development in 8 minutes.
</li>
<br />
<iframe src="assets/images/3.mp4" width="600" height="338" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<br />
<li><b>Googler Panel :</b> This was the most awaited session that I had been waiting for. Four of the female Googlers discussed about their challenges, achievements and journey to computer Science. They focussed on the importance of diversity, issue of gender inequality followed by an advice to work in Google. The discussion inspired me with confidence and motivated me to work harder.
</li>
<br />

<li><b>Dinner :</b> The day ended with a dinner at a traditional Korean Restaurant. We were served local dishes that included soft tofu, Vegetable &amp; Perilla seeds salad, Kimchi Pancake, Mushroom Soup, Tofu Steak, Glass Noodle , Dessert along with red wine (:P) .
</li>
</ol>

<h5 id="heading5">DAY 2 - August 30th</h5>
<p>The second day started with the breakfast at the Google office followed by the energiser. We continued learning the <strong>K-pop</strong> dance steps. There were a lot of activities planned by the Google which included :</p>

<ol>
<li><b>Former Scholars Panel :</b> The session started with an intuitive and thoughtful panel by former scholars who discussed about their challenges, their outreach activities and involvement in the community and motivated us to stay in contact with other scholars and  to believe in ourselves.
</li>
<br />

<li><b>Lighting Round — APAC projects :</b> The session initiated by the Googlers from different parts of the APAC region who introduced us to  different features of the Google products like Google Slides, Google docs, Allo, Chrome, Augmented Reality and Google Cloud. The  part that I liked most was the Project Explore feature of Google docs which will suggest content, picture and presentation styles.
</li>
<br />

<li><b>Google Programs and Opportunities :</b> They discussed about the application process for an internship/ job at Google and their deadlines.
</li>
<br />

<li><b>Big query Codelab :</b> BigQuery is Google's global-scale data analytics platform. It is a No-Ops Data Warehouse, Highly Available and Fast with the Convenience of SQL. This workshop introduced us to some BigQuery basics and we had a live coding session with the whole audience, analyzing the whole Wikipedia for interesting insights.
</li>
<br />

<li><b>CodeJam Kickstart :</b>  We had a demo CodeJam contest where we had 2 problems to introduce everyone to the platform of the CodeJam. They advised us to participate in all the contests as it is a good example of the google interview process and is the perfect way to prepare for the interview.
</li>
<br />
<li><b>Free Time :</b> The day ended with the announcements and we were dropped at the hotel. We explored the hotel and the mall connected to the hotel(which had a huge library) and then, went for the shopping to the Myengdong and Dongdaemon markets. The best thing that I liked about the market was the tourist office in the market. Just in case you don't know where you are heading or you just get lost, there are Mobile Tourist Officers who are very helpful to guide you on your direction.
</li>
<br />
<img src="assets/images/6.jpg" style="max-width:650px" />
<br />
</ol>

<h5 id="heading5">DAY 3 - August 31st</h5>
<p>Time flies when you are having fun. This was already the last day of the retreat and this day was meant for bonding and making memories.
The day initiated with a breakfast at the office followed by the energiser where everyone performed on the complete K-pop song.</p>

<ol>
<li><b>Interview and resume workshop :</b> The session started with a resume workshop where the Googlers advised on how to build a resume mentioning the key points. This was followed by a mock interview which was focussed on the thought process instead of simply writing the codes. The two key points were to think out loud and ask questions.
</li>
<br />


<li><b>Closing Talk :</b> The retreat ended with a closing talk by the head of the APAC recruiting, Dan who thanked everyone of us to be a part of the retreat and motivated us to follow our passion. This was followed by a Group picture with all the smiling faces saying <b>“Kimchi”</b>  :P.
</li>
<br />
<img src="assets/images/7.jpg" style="max-width:650px" />
<br />

<li><b>Seoul Searching :</b> This was the most exciting event organized by the googlers where we went for a scavenger hunt along with our team and 1 googler. Our task was to get a picture with everything that was mentioned in the list and return to the office in 4 hours. It was great fun  exploring the city , interacting with the fellow scholars.  
<br />
P.s - Our team (Team Yellow) won the scavenger hunt :D
</li> 
<br />
<img src="assets/images/8.jpg" style="max-width:650px" />
<br />

</ol>

<h5 id="heading5">Overall Experience</h5>
<p>Those 4 days were the best days of my life. I never believed that something like this could ever happen to me, such a thing that would make me stop and look back at the events in awe. An experience like this made me think about my place in life. This retreat introduced me to the support network by introducing me to the Google mentors, Google engineers, former scholars and my fellow scholars where each one of them had their own inspiring stories of success and failures. My network of incredible women in technology grew and it changed my outlook on life and motivated me to build the skills and develop my profile as a leader in the community. Also, I got lots of goodies from Google :D. 
<br />
<img src="assets/images/9.jpg" style="max-width:650px" />
<br /></p>

<blockquote>
  <p><strong>Lesson Learnt</strong> <br />
Just believe in yourself, You will be unstoppable. :)</p>
</blockquote>

	  ]]></description>
	</item>

	<item>
	  <title>Configuration of Mailman to Hyperkitty</title>
	  <link>//Configuration-of-Mailman-to-Hyperkitty</link>
	  <author>Aditi Gupta</author>
	  <pubDate>2017-07-05T05:30:00+05:30</pubDate>
	  <guid>//Configuration-of-Mailman-to-Hyperkitty</guid>
	  <description><![CDATA[
	     <p>This is a quick guide to configure Mailman to hyperkitty.</p>

<p>For connecting hyperkitty to Mailman and receive incoming emails from Mailman, you must install the mailman-hyperkitty module available on PyPI in Mailman’s virtualenv, and then add the following lines to <strong>mailman-hyperkitty.cfg</strong> :</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">[</span><span class="n">archiver</span><span class="p">.</span><span class="nf">hyperkitty</span><span class="p">]</span>
<span class="ss">class: </span><span class="n">mailman_hyperkitty</span><span class="o">.</span><span class="no">Archiver</span>
<span class="ss">enable: </span><span class="n">yes</span>
<span class="ss">configuration: </span><span class="sr">/path/</span><span class="n">to</span><span class="o">/</span><span class="n">mailman</span><span class="o">-</span><span class="n">hyperkitty</span><span class="o">/</span><span class="n">mailman</span><span class="o">-</span><span class="n">hyperkitty</span><span class="p">.</span><span class="nf">cfg</span></code></pre></figure>

<p>You must set the URL to your HyperKitty installation in that file. The path mentioned in the configuration should be an absolute path to the <strong>mailman-hyperkitty.cfg</strong> file. It is also highly recommanded to change the API secret key and in the MAILMAN_ARCHIVER_KEY variable in settings.py (or settings_local.py).</p>

<p>Also, the MAILMAN_REST_API_URL in settings.py file of hyperkitty should be changed as the port 8001 is used for production and 9001 is used for development.</p>

<p>Following change needs to be done in settings.py of <strong>hyperkitty/example_project</strong> :</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">DEBUG</span> <span class="o">=</span> <span class="no">True</span>
<span class="no">MAILMAN_REST_API_URL</span> <span class="o">=</span> <span class="s1">'http://localhost:9001'</span></code></pre></figure>

<p>After having made these changes, you must restart Mailman. Check its log files to make sure the emails are correctly archived. You should not see “Broken archiver: hyperkitty” messages.</p>


	  ]]></description>
	</item>

	<item>
	  <title>GSoC'17  With  Systers</title>
	  <link>//GSoC'17-With-Systers</link>
	  <author>Aditi Gupta</author>
	  <pubDate>2017-05-15T05:30:00+05:30</pubDate>
	  <guid>//GSoC'17-With-Systers</guid>
	  <description><![CDATA[
	     <p>I am glad to share the feeling of being a part of the exclusive GSoC club after being selected in the Google Summer of Code program for the second time under <strong>Systers</strong>. I have been a part of the Systers community for a long time being actively involved in the GSoC’16 program, Google Code-In’16 program and now, working as a student for the <strong>Systers Mailman3</strong> project in GSoC’17 .</p>

<blockquote>
  <p><strong>GNU Mailman3</strong><br />
Mailman, the GNU Mailing List Manager is a free software for managing electronic mail discussion and e-newsletter lists. Mailman is integrated with the web, making it easy for users to manage their accounts and for list owners to administer their lists. Mailman supports built-in archiving, automatic bounce processing, content filtering, digest delivery, spam filters, and more.</p>
</blockquote>

<p>The objective of this project is to port the existing features of Systers Mailman2 version to the newer released version of Mailman i.e Mailman 3.1. The features that needs to be ported includes :</p>
<ul>
  <li>Essay</li>  
  <li>Stats for Admins</li>  
  <ul>
     <li>Number of subscribers/unsubscribers.</li>
     <li>Number of total unique subject lines.</li>
     <li>Number of subscribers that posted.</li>
  </ul>
</ul>
<p>I hope I will be able to do justice to the trust that my mentor has shown in me by selecting me for the project. Here’s to a great summer ahead!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Stats Implementation in Mailman3</title>
	  <link>//Stats-Implementation-in-Mailman3</link>
	  <author>Aditi Gupta</author>
	  <pubDate>2016-08-12T05:30:00+05:30</pubDate>
	  <guid>//Stats-Implementation-in-Mailman3</guid>
	  <description><![CDATA[
	     <p><em>My next task was to implement the stats feature in Mailman3.It had three parts.This is the detailed report of the implementation.</em></p>

<blockquote>
  <p><strong>Overview</strong><br />
<strong>Problem:</strong> Monthly reports are executed at the first of the month for prior month. Details in the report include, total number of members, subscription requests, digest members, and unsubscribes.</p>
</blockquote>

<p><strong>Desired Solution:</strong> <em>Add additional stats for the following:</em></p>
<ul>
<li> Number of unsubscribers for : 
<ul>
<li>Members option page</li>
<li>Disabled address</li>
<li>Member mgt page</li>
<li>Admin mass Unsubscription</li>
<li>email confirmation</li>
(I am still working on the task of counting unsubscriptions through email confirmation.)
</ul>
</li>

<li> Number of total unique subject lines </li>

<li> Number of subscribers that posted </li>
</ul>

<blockquote>
  <p><strong>Product</strong><br />
These are the products’ images.</p>
</blockquote>
<ul>
<li> This is the list subscription page.There is a "stats" button on the top right corner of the page which redirects to the stats page.
</li>
<img src="assets/images/img5.gif" style="max-width:700px" /> 

<li>  This is the form where the admin can view either the monthly stats by pressing the "Monthly Stats" button or can view the stats according to the start and end date entered through the form.
</li>
<img src="assets/images/img4.png" style="max-width:700px" /> 

<li>  This is the page where the admin can view all the monthly stats.The default page shows the stats of the present month.The admin can see the stats of any month by selecting it from the left sidebar.
</li>
<img src="assets/images/img6.jpg" style="max-width:700px" /> 
</ul>

<blockquote>
  <p><strong>Github</strong></p>
</blockquote>

<p><em>GitHub code changes can be seen</em> <a href="https://github.com/systers/postorius/pull/4/files">here</a>.<br />
<em>The pull request for the code changes can be seen</em> <a href="https://github.com/systers/postorius/pull/4">here</a>.</p>

<blockquote>
  <p><strong>Functional Changes in Postorius</strong></p>
</blockquote>
<ul>
<li> Modal class 'UnsubscriberStats' that stores the details of the user unsubscribed through different channels. </li>

<li> Added class'UnsubscriberStatsForm' in forms.py that takes start and end date as input and filters the stats between the given dates. </li>

<li> Modified list.py to store the value of unsubscribed users through different channels in database. </li>

<li> Provided 'Monthly Stats' button on the form page that takes the user to the page where stats are listed month-wise. </li>

<li> Used 'Hyperkitty Api' to fetch the data of emails sent to a particular mailing list in the form of json file. </li>

<li> Counted the unique subjects discussed in the mailing list and filtered them according to month for displaying the stats of 'Unique Subject Lines'. </li>

<li> Counted the number of subscribers that posted by filtering the json file fetched from the Hyperkitty Api. </li>
</ul>

<blockquote>
  <p><strong>Files changed</strong></p>
</blockquote>
<ul>
<li> src/postorius/forms.py </li>
<li> src/postorius/models.py </li>
<li> src/postorius/templates/postorius/menu/list_nav.html </li>
<li> src/postorius/urls.py </li>
<li> src/postorius/views/list.py </li>
<li> src/postorius/views/user.py </li>
</ul>

<blockquote>
  <p><strong>Files created</strong></p>
</blockquote>
<ul>
<li> src/postorius/static/postorius/js/datepicker.js </li>
<li> src/postorius/views/stats.py </li>
<li> src/postorius/templates/postorius/lists/stats_form.html </li>
<li> src/postorius/views/monthly_stats.py </li>
<li> src/postorius/templates/postorius/lists/monthly_stats.html</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Send email in a thread in Mailman3</title>
	  <link>//Send-email-in-a-thread-in-Mailman3</link>
	  <author>Aditi Gupta</author>
	  <pubDate>2016-07-01T05:30:00+05:30</pubDate>
	  <guid>//Send-email-in-a-thread-in-Mailman3</guid>
	  <description><![CDATA[
	     <p><em>This is a quick guide to send email in a thread through Mailman3 command line.</em></p>

<p><em>To send the mails in a thread and view in hyperkitty ui, follow the following steps :</em></p>

<ul>
  <li><em>Activate virtual environment (python3) for mailman using :</em></li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">source</span> <span class="n">venv3</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">activate</span></code></pre></figure>

<ul>
  <li><em>Create an email.txt file in mailman repository having following contents :</em></li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">From</span><span class="p">:</span> <span class="n">aditi</span><span class="p">.</span><span class="nf">medha96</span><span class="vi">@gmail</span><span class="p">.</span><span class="nf">com</span>
<span class="no">To</span><span class="p">:</span> <span class="nb">test</span><span class="vi">@example</span><span class="p">.</span><span class="nf">net</span>
<span class="no">Subject</span><span class="p">:</span> <span class="no">Test</span>
<span class="no">Message</span><span class="o">-</span><span class="no">ID</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">abcd</span><span class="o">&gt;</span>
<span class="no">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">text</span> <span class="n">message</span><span class="o">.</span></code></pre></figure>

<ul>
  <li><em>Inject mail in the archive queue using :</em></li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mailman</span> <span class="n">inject</span> <span class="o">-</span><span class="n">q</span> <span class="n">archive</span> <span class="o">-</span><span class="n">f</span> <span class="n">email</span><span class="p">.</span><span class="nf">txt</span> <span class="nb">test</span><span class="vi">@example</span><span class="p">.</span><span class="nf">net</span></code></pre></figure>

<blockquote>
  <p>A thread is created with the subject <strong>“Test”</strong>.To send an email to this thread, we need to send the message to <strong>message_id@domain.com</strong> of the list.</p>
</blockquote>

<ul>
  <li><em>Create a reply.txt file in mailman repository having following contents :</em></li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">From</span><span class="p">:</span> <span class="n">agarwalm214</span><span class="vi">@gmail</span><span class="p">.</span><span class="nf">com</span>
<span class="no">In</span><span class="o">-</span><span class="no">Reply</span><span class="o">-</span><span class="no">To</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">abcd</span><span class="o">&gt;</span><span class="vi">@example</span><span class="p">.</span><span class="nf">net</span>
<span class="no">Subject</span><span class="p">:</span> <span class="no">Test</span>
<span class="no">Message</span><span class="o">-</span><span class="no">ID</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">xyz</span><span class="o">&gt;</span>
<span class="no">Successful</span> <span class="n">message</span> <span class="n">to</span> <span class="n">the</span> <span class="n">thread</span><span class="o">.</span></code></pre></figure>

<blockquote>
  <p>Here, we changed <strong>“To”</strong> to <strong>“In-Reply-To”</strong>.</p>
</blockquote>

<ul>
  <li><em>Inject mail in the archive queue using :</em></li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mailman</span> <span class="n">inject</span> <span class="o">-</span><span class="n">q</span> <span class="n">archive</span> <span class="o">-</span><span class="n">f</span> <span class="n">replyl</span><span class="p">.</span><span class="nf">txt</span> <span class="nb">test</span><span class="vi">@example</span><span class="p">.</span><span class="nf">net</span></code></pre></figure>

<p>Refresh the hyperkitty page. And there you go. You will find an unread message in the thread with the subject <strong>“Test”.</strong></p>


	  ]]></description>
	</item>

	<item>
	  <title>Build Hyperkitty in easy way</title>
	  <link>//Build-Hyperkitty-in-easy-way</link>
	  <author>Aditi Gupta</author>
	  <pubDate>2016-06-26T05:30:00+05:30</pubDate>
	  <guid>//Build-Hyperkitty-in-easy-way</guid>
	  <description><![CDATA[
	     <p><em>This is a quick guide to build hyperkitty,the archive manager.</em></p>

<p><strong>HyperKitty</strong> is the archiver project for the Mailman 3 suite, allowing users to browse mailing lists, start new threads and reply to existing threads, mark messages as favorite, search archives etc.It is an open source Django application under development. It aims to provide a web interface to access GNU Mailman v3 archives.</p>

<blockquote>
  <p><strong>Required Installations</strong></p>
</blockquote>
<ul>
 <li>LibSass, a C/C++ port of the Sass engine using : 
  
<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">   <span class="n">pip</span> <span class="n">install</span> <span class="n">libsass</span>
  </code></pre></figure>

 </li>

 <li> Whoosh, a fast,featureful full-text indexing and searching library implemented in pure Python using : 
  
<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">   <span class="n">pip</span> <span class="n">install</span> <span class="no">Whoosh</span>
  </code></pre></figure>

 </li>

</ul>

<blockquote>
  <p><strong>Setting up hyperkitty for development</strong></p>
</blockquote>
<ul>
<li> Create virtual environment using : 

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">virtualenv</span> <span class="o">-</span><span class="nb">p</span> <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">python2</span> <span class="n">venv2</span></code></pre></figure>

   (Hyperkitty is written in Python2)
</li>

<li> Activate the virtual environment : 

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">source</span> <span class="n">venv2</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">activate</span></code></pre></figure>

</li>

<li> Clone the hyperkitty repo from gitlab :

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">    <span class="n">git</span> <span class="nb">clone</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">gitlab</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">mailman</span><span class="o">/</span><span class="n">hyperkitty</span><span class="p">.</span><span class="nf">git</span>
    <span class="n">cd</span> <span class="n">hyperkitty</span>
    <span class="n">python</span> <span class="n">setup</span><span class="p">.</span><span class="nf">py</span> <span class="n">develop</span></code></pre></figure>

   (Make sure to  install mailmanclient first)
</li>
</ul>
<blockquote>
  <p><strong>Configuration</strong></p>
</blockquote>

<p>Create a <em>settings_local.py</em> in <em>hyperkitty/example_project/</em> repository for development setup having following contents :</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">DEBUG</span> <span class="o">=</span> <span class="no">True</span>
<span class="no">TEMPLATE_DEBUG</span> <span class="o">=</span> <span class="no">DEBUG</span>
<span class="no">USE_SSL</span> <span class="o">=</span> <span class="no">False</span></code></pre></figure>

<blockquote>
  <p><strong>Setting up database</strong></p>
</blockquote>

<p><em>Create the Hyperkitty databases using :</em></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">django</span><span class="o">-</span><span class="n">admin</span> <span class="n">migrate</span> <span class="o">--</span><span class="n">pythonpath</span> <span class="n">example_project</span> <span class="o">--</span><span class="n">settings</span> <span class="n">settings</span></code></pre></figure>

<blockquote>
  <p><strong>Running HyperKitty</strong></p>
</blockquote>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">django</span><span class="o">-</span><span class="n">admin</span> <span class="n">runserver</span> <span class="o">--</span><span class="n">pythonpath</span> <span class="n">example_project</span> <span class="o">--</span><span class="n">settings</span> <span class="n">settings</span></code></pre></figure>

<p><em>Make sure to  start mailman first using :</em></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mailman</span> <span class="n">start</span></code></pre></figure>

<p>You would be able to see the hyperkitty page with the message <strong>“No archived lists yet”.</strong></p>

<blockquote>
  <p><strong>Importing mailing Lists from mailman</strong></p>
</blockquote>

<p>To view the mailing lists created by you, you need to follow the given steps :</p>
<ul>
<li>Type the following commands in hyperkitty/example_project directory after activating the virtual environment:
    
<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">    <span class="n">python</span> <span class="n">manage</span><span class="p">.</span><span class="nf">py</span> <span class="n">shell</span>
    <span class="n">from</span> <span class="n">hyperkitty</span><span class="p">.</span><span class="nf">lib</span><span class="p">.</span><span class="nf">mailman</span> <span class="n">import</span> <span class="n">get_new_lists_from_mailman</span>
    <span class="n">get_new_lists_from_mailman</span><span class="p">()</span>
    </code></pre></figure>

</li>
<li>Start the server again. Uncheck the *“Hide inactive”* option. You would be able to see all the lists in *“By name”* option.</li>
</ul>

<blockquote>
  <p><strong>View emails in hyperkitty</strong></p>
</blockquote>

<p><em>Since,we are running hyperkitty on  development server and DEBUG is set to True, we can’t send emails and create threads through hyperkitty ui. We need to send mails through command line.</em></p>

<p><em>To send the mails and view in hyperkitty ui, follow the following steps :</em></p>
<ul>
<li>Activate virtual environment (python3) for mailman using : 

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">source</span> <span class="n">venv3</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">activate</span></code></pre></figure>

</li>

<li> Create an email.txt file in mailman repository having following contents :
  
<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">   <span class="no">From</span><span class="p">:</span> <span class="n">aditi</span><span class="p">.</span><span class="nf">medha96</span><span class="vi">@gmail</span><span class="p">.</span><span class="nf">com</span>
   <span class="no">To</span><span class="p">:</span> <span class="nb">test</span><span class="vi">@example</span><span class="p">.</span><span class="nf">net</span>
   <span class="no">Subject</span><span class="p">:</span> <span class="no">Test</span>
   <span class="no">Message</span><span class="o">-</span><span class="no">ID</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">abcd</span><span class="o">&gt;</span>
   <span class="no">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">text</span> <span class="n">message</span>
   </code></pre></figure>

</li>

<li>Inject mail in the archive queue using : 

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mailman</span> <span class="n">inject</span> <span class="o">-</span><span class="n">q</span> <span class="n">archive</span> <span class="o">-</span><span class="n">f</span> <span class="n">email</span><span class="p">.</span><span class="nf">txt</span> <span class="nb">test</span><span class="vi">@example</span><span class="p">.</span><span class="nf">net</span></code></pre></figure>

</li>
</ul>
<p>Refresh the hyperkitty page.Now, you would be able to see the email sent to <strong>test@example.net</strong> in hyperkitty ui.</p>

<blockquote>
  <p>Please refer to <a href="http://hyperkitty.readthedocs.io/en/latest/install.html">Hyperkitty</a> for latest documentation.</p>
</blockquote>

	  ]]></description>
	</item>

	<item>
	  <title>Essay Implementation in Mailman3</title>
	  <link>//Essay-Implementation-in-Mailman3</link>
	  <author>Aditi Gupta</author>
	  <pubDate>2016-06-12T05:30:00+05:30</pubDate>
	  <guid>//Essay-Implementation-in-Mailman3</guid>
	  <description><![CDATA[
	     <p><em>My first task was to implement the essay feature in Mailman3. This is the detailed report of the implementation.</em></p>

<blockquote>
  <p><strong>Overview</strong><br />
An essay is a set of questions that can be asked by the list admin, which has to be answered by the subscriber in order to subscribe. These details can be viewed anytime by the admin.</p>
</blockquote>

<ul>
  <li>
    <p><em>This is the list subscription page.The details entered through this form gets saved in an ‘essay’ model.</em>
 <img src="assets/images/img.jpg" style="max-width:700px" /></p>
  </li>
  <li>
    <p><em>This is the admins page where all subscription requests are listed. I have provided a “detail” button which will take us to that page where essay of that user can be viewed.</em></p>
  </li>
</ul>

<p><img src="assets/images/img1.jpg" style="max-width:700px" /></p>

<ul>
  <li><em>This is the page where the admin can see all the information entered by the user. The essay is arranged according to date.</em></li>
</ul>

<p><img src="assets/images/img2.jpg" style="max-width:700px" /></p>

<ul>
  <li><em>This is the page where all subscribed members are listed. I have provided a “Essay Details” button which will take us to that page where essay of that user can be viewed.</em></li>
</ul>

<p><img src="assets/images/img3.jpg" style="max-width:700px" /></p>

<blockquote>
  <p><strong>Github</strong></p>
</blockquote>

<p><em>GitHub code changes can be seen</em> <a href="https://github.com/systers/postorius/pull/4/files">here</a>.<br />
<em>The pull request for the code changes can be seen</em> <a href="https://github.com/systers/postorius/pull/4">here</a>.</p>

<blockquote>
  <p><strong>Functional Changes in Postorius</strong></p>
</blockquote>

<ul>
  <li>
    <p><em>Model class ‘EssaySubscribe’ that stores the details entered by the user through the form during subscription request.</em></p>
  </li>
  <li>
    <p><em>Modified forms.py according to Systers’ needs and store it to the database created in models.py.</em></p>
  </li>
  <li>
    <p><em>Modified list.py to fetch the value from the form and store them in database.</em></p>
  </li>
  <li>
    <p><em>Template ‘application.html’ to show the essay details.</em></p>
  </li>
  <li>
    <p><em>View ‘essay.py’ for essay.</em></p>
  </li>
  <li>
    <p><em>Modified ‘urls.py’ to give the path to template for essay.</em></p>
  </li>
  <li>
    <p><em>Provided buttons on ‘subscription_requests.html’ and ‘members.html’.</em></p>
  </li>
</ul>

<blockquote>
  <p><strong>Files changed</strong></p>
</blockquote>

<ul>
  <li><em>src/postorius/forms.py</em></li>
  <li><em>src/postorius/models.py</em></li>
  <li><em>src/postorius/templates/postorius/lists/members.html</em></li>
  <li><em>src/postorius/templates/postorius/lists/subscription_requests.html</em></li>
  <li><em>src/postorius/templates/postorius/lists/summary.html</em></li>
  <li><em>src/postorius/urls.py</em></li>
  <li><em>src/postorius/views/list.py</em></li>
</ul>

<blockquote>
  <p><strong>Files created</strong></p>
</blockquote>

<ul>
  <li><em>src/postorius/views/essay.py</em></li>
  <li><em>src/postorius/templates/postorius/lists/application.html</em></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>GSoC'16 With Systers</title>
	  <link>//GSoC'16-With-Systers</link>
	  <author>Aditi Gupta</author>
	  <pubDate>2016-04-27T05:30:00+05:30</pubDate>
	  <guid>//GSoC'16-With-Systers</guid>
	  <description><![CDATA[
	     <p><em>You Think And it happens.</em></p>

<p><em>I love the surprises life holds. Last year, I defined a role I really wanted to pursue when I was in my first year then… I Knew it was kind of a thought and maybe not even ideal for me but I just knew, I wanted it!</em></p>

<p><em>This year I got selected for <strong>Systers Mailman3 Project</strong> under <strong>Google Summer of code’16 program</strong>.</em></p>

<p><em>I started looking for Organizations right after the List of Accepted Organization was posted.I needed an organization that suited to my interests.I wanted to work in python. So, I narrowed down my search to python projects and I ended up choosing <strong>“Systers Features for Mailman 3”</strong> project offered by the <strong>“Systers Organization”</strong>.I wanted to contribute to open source so that,I could create and manage interactive learning material and softwares that would be available online to everyone and help other women in computing.</em></p>

<p><em>After selecting the organization, I introduced myself to the Systers and the Mailman communities.I joined their slack and irc channels.I got familiar with their workflow.There were times when I faced lots of difficulties.It took me time to understand how a particular piece of code worked, or about the required technology.I used to clear my doubts by asking questions to the established developers of that project.As I was new to the open source community, I made many mistakes but my mentors<strong>(Stephen J Turnbull , Sneha Bhattacharya, Khushboo Surana, Harshita Kasera )</strong> corrected me everytime. I used to ask my every doubt with mentors.But, Stephen taught me that <strong>“Asking is not stupid and will see you through a lot of unnecessary struggle but learning to make your mind do that jumping instead of asking questions (which are like bridges) is a key aspect of becoming a ‘software engineer’</strong>. Coding is important, knowing the language and existing code is important, but creating something new is where most of the value-added comes from.” I learnt to be patient.I learnt that patience is not the ability to wait but how you act while you’re waiting.</em></p>

<p><em>While building the local environment in my system, I found a correction in the documentation of installation of mailman.I filed an issue regarding the correction and got it fixed.Although small, my first patch boosted my confidence.</em></p>

<p><em>My next step was to complete the proposal.I submitted my draft proposal by 18th March’16.I asked the mentors for advice and opinions on my proposal.They gave me insights of the project and things to think about.I modified my proposal accordingly,and asked them to re-review everytime I made changes.I repeated this until the last day.</em></p>

<p><em>I did my job with the proposal and Summer of Code formalities.I just had one thing in my mind whether I get selected or not it really didn’t matter.I gave it my best shot. After submission,I continued contributing.I started with some bug-fixing in GNU Mailman.I fixed around 2 bugs which were opened on gitlab and filed 1 more issue on github.When this got accepted it gave me a moral boost to contribute more.I was a member of a community now, I was the part of why the organisation’s product runs the way it does, even if it’s a tiny part.</em></p>


	  ]]></description>
	</item>


</channel>
</rss>
